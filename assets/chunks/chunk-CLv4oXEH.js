import{bN as y,bM as E,D as S,br as w,dt as d,bc as D,du as M,dv as N,dw as h,dx as b,dy as F,z as T}from"./chunk-BCtBXoS3.js";import"./chunk-Zpopvlea.js";import"./chunk-UADQAoLm.js";import"./chunk-DxfIC8xT.js";import"./chunk-fEI7Cr-O.js";import"./chunk-Ch0SDxT-.js";import"./chunk-DBIPdCjN.js";const m=()=>T.getLogger("esri.rest.support.meshFeatureSet");function Z(e,t,r){const s=r.features;r.features=[],delete r.geometryType;const n=y.fromJSON(r);if(n.geometryType="mesh",!r.assetMaps)return n;const a=$(t,r.assetMaps),i=e.sourceSpatialReference??E.WGS84,f=r.globalIdFieldName,{outFields:o}=e,l=o!=null&&o.length>0?x(o.includes("*")?null:new Set(o)):()=>({});for(const c of s){const u=I(c,f,i,t,a);u!=null&&n.features.push(new S({geometry:u,attributes:l(c)}))}return n}function x(e){return({attributes:t})=>{if(!t)return{};if(!e)return t;for(const r in t)e.has(r)||delete t[r];return t}}function I(e,t,r,s,n){const a=e.attributes[t],i=n.get(a);if(i==null)return m().error("mesh-feature-set:asset-not-found","Service returned a feature which was not found in the asset map",e),null;if(!e.geometry)return m().error("mesh-feature-set:no-geometry","Service returned a feature without geometry",e),null;const f=L(e,r,s),o=w.fromJSON(e.geometry);o.spatialReference=r;const l=O(e.attributes,s),c=r.isGeographic?"local":"georeferenced",u=v(i);return u?d.createWithExternalSource(f,u,{extent:o,transform:l,vertexSpace:c}):d.createIncomplete(f,{extent:o,transform:l,vertexSpace:c})}function L({attributes:e},t,{transformFieldRoles:r}){const s=e[r.originX],n=e[r.originY],a=e[r.originZ];return new D({x:s,y:n,z:a,spatialReference:t})}function O(e,{transformFieldRoles:t}){return new M({translation:[e[t.translationX],-e[t.translationZ],e[t.translationY]],rotationAxis:[e[t.rotationX],-e[t.rotationZ],e[t.rotationY]],rotationAngle:e[t.rotationDeg],scale:[e[t.scaleX],e[t.scaleZ],e[t.scaleY]]})}var p;function $(e,t){const r=new Map;for(const s of t){const n=s.parentGlobalId;if(n==null)continue;const a=s.assetName,i=s.assetType,f=s.assetHash,o=s.assetURL,l=s.conversionStatus,c=s.seqNo,u=N(i,e.supportedFormats);if(!u){m().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const g=h(r,n,()=>({files:new Map}));h(g.files,a,()=>({name:a,type:i,mimeType:u,status:A(l),parts:[]})).parts[c]={hash:f,url:o}}return r}function v(e){const t=Array.from(e.files.values()),r=new Array;for(const s of t){if(s.status!==p.COMPLETED)return null;const n=new Array;for(const a of s.parts){if(!a)return null;n.push(new b(a.url,a.hash))}r.push(new F(s.name,s.mimeType,n))}return r}function A(e){switch(e){case"COMPLETED":case"SUBMITTED":return p.COMPLETED;case"INPROGRESS":return p.PENDING;default:return p.FAILED}}(function(e){e[e.FAILED=0]="FAILED",e[e.PENDING=1]="PENDING",e[e.COMPLETED=2]="COMPLETED"})(p||(p={}));export{$ as assetMapFromAssetMapsJSON,I as extractMesh,Z as meshFeatureSetFromJSON};
