import{fv as o,dd as g,ae as n,D as l,V as c,q as d,at as a,$ as p,a0 as m,a2 as u,fF as w}from"./chunk-DfTZZpt0.js";import{t as y}from"./chunk-BH_F4VIp.js";import{$ as V}from"./chunk-DAXy9pP3.js";import{t as f}from"./chunk-DZR5I2wx.js";import"./chunk-wXzftp25.js";import"./chunk-CjzDLHuf.js";import"./chunk-DkhztfFA.js";import"./chunk-fEI7Cr-O.js";import"./chunk-Ch0SDxT-.js";import"./chunk-DBIPdCjN.js";import"./chunk-Cgag4TiB.js";import"./chunk-BqSsjcSJ.js";import"./chunk-DYh1AX_g.js";import"./chunk-BcbHrfVt.js";import"./chunk-D5zmR9t2.js";import"./chunk-CGDmfgRt.js";import"./chunk-CZ7480fB.js";import"./chunk-DODQBCAp.js";import"./chunk-Cu8d7AbK.js";import"./chunk-DgAf_RsW.js";import"./chunk-CvgiXnaQ.js";import"./chunk-Sgy9emtd.js";import"./chunk-Wa8cmqdu.js";import"./chunk-D6hdWx8H.js";let s=class extends o(g){constructor(){super(...arguments),this._highlightCounter=new f}attach(){this.graphicsView=new V({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new y(this.view.featuresTilingScheme),layerId:this.layer.id}),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler)),this._updateHighlight()}detach(){this.container.removeAllChildren(),this.graphicsView=n(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i,t="highlight"){let e;typeof i=="number"?e=[i]:i instanceof l?e=[i.uid]:Array.isArray(i)&&i.length>0?e=typeof i[0]=="number"?i:i.map(r=>r&&r.uid):c.isCollection(i)&&i.length>0&&(e=i.map(r=>r&&r.uid).toArray());const h=e?.filter(d);return h?.length?(this._addHighlight(h,t),a(()=>this._removeHighlight(h,t))):a()}_addHighlight(i,t){this._highlightCounter.addReason(i,t),this._updateHighlight()}_removeHighlight(i,t){this._highlightCounter.deleteReason(i,t),this._updateHighlight()}_updateHighlight(){const i=[];for(const t of this._highlightCounter.ids()){const e=this._highlightCounter.getHighestReason(t),h=w(e);i.push({objectId:t,highlightFlags:h})}this.graphicsView?.setHighlight(i)}};p([m()],s.prototype,"graphicsView",void 0),s=p([u("esri.views.2d.layers.GraphicsLayerView2D")],s);const J=s;export{J as default};
