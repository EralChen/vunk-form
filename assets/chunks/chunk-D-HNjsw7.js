import{fv as m,dd as f,D as w,V as y,q as _,at as c,ak as a,_ as o,dG as V,$ as v,a2 as C,fF as H}from"./chunk-Ceac9yqH.js";import{t as g}from"./chunk-C04taQw1.js";import{$ as d}from"./chunk-DgRPSqsn.js";import"./chunk-Defr39CA.js";import"./chunk-BvwBNQlH.js";import"./chunk-Isw0PHqr.js";import"./chunk-DsEj1cS7.js";import"./chunk-Ch0SDxT-.js";import"./chunk-DBIPdCjN.js";import"./chunk-Dnl4-0u8.js";import"./chunk-CV9sOQot.js";import"./chunk-0eXTxGxr.js";import"./chunk-Ct8LlJHt.js";import"./chunk-D5zmR9t2.js";import"./chunk-BGgtXes0.js";import"./chunk-Dwrs0Egq.js";import"./chunk-D91ktwrC.js";import"./chunk-CyHDIZgk.js";import"./chunk-BfiWDRQA.js";import"./chunk-CvgiXnaQ.js";import"./chunk-Cm87XsPu.js";import"./chunk-Wa8cmqdu.js";import"./chunk-B8H8XdX8.js";const u="sublayers",n="layerView";let p=class extends m(f){constructor(){super(...arguments),this._highlightIds=new Map}*graphicsViews(){this._graphicsViewsFeatureCollectionMap==null?this._graphicsViews==null?yield*[]:yield*this._graphicsViews:yield*this._graphicsViewsFeatureCollectionMap.keys()}async hitTest(i,t){return Array.from(this.graphicsViews(),e=>{const s=e.hitTest(i);if(this._graphicsViewsFeatureCollectionMap!=null){const r=this._graphicsViewsFeatureCollectionMap.get(e);for(const h of s)!h.popupTemplate&&r.popupTemplate&&(h.popupTemplate=r.popupTemplate),h.sourceLayer=h.layer=this.layer}return s}).flat().map(e=>({type:"graphic",graphic:e,layer:this.layer,mapPoint:i}))}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof w?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(s=>s&&s.uid):y.isCollection(i)&&(t=i.map(s=>s&&s.uid).toArray());const e=t?.filter(_);return e?.length?(this._addHighlight(e),c(()=>this._removeHighlight(e))):c()}update(i){for(const t of this.graphicsViews())t.processUpdate(i)}attach(){const i=this.view,t=()=>this.requestUpdate(),e=this.layer.featureCollections;if(e!=null&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const s of e){const r=new g(this.view.featuresTilingScheme),h=new d({view:i,graphics:s.source,renderer:s.renderer,requestUpdateCallback:t,container:r});this._graphicsViewsFeatureCollectionMap.set(h,s),this.container.addChild(h.container),this.addHandles([a(()=>s.visible,l=>h.container.visible=l,o),a(()=>h.updating,()=>this.notifyChange("updating"),o)],n)}this._updateHighlight()}else this.layer.sublayers!=null&&this.addHandles(V(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),u)}detach(){this._destroyGraphicsViews(),this.removeHandles(u)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.removeHandles(n);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),this.layer.sublayers==null)return;const i=[],t=this.view,e=()=>this.requestUpdate();for(const s of this.layer.sublayers){const r=new g(this.view.featuresTilingScheme);r.fadeTransitionEnabled=!0;const h=new d({view:t,graphics:s.graphics,requestUpdateCallback:e,container:r});this.addHandles([s.on("graphic-update",h.graphicUpdateHandler),a(()=>s.visible,l=>h.container.visible=l,o),a(()=>h.updating,()=>this.notifyChange("updating"),o)],n),this.container.addChild(h.container),i.push(h)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys()),t=H("highlight");for(const e of this.graphicsViews())e.setHighlight(i.map(s=>({objectId:s,highlightFlags:t})))}};p=v([C("esri.views.2d.layers.MapNotesLayerView2D")],p);const K=p;export{K as default};
