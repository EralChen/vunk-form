import{bc as l,bd as w,be as h}from"./chunk-B1N8G8sW.js";import"./chunk-CyiLY1__.js";import"./chunk-CAS0iGZj.js";import"./chunk-C7ZeX_9O.js";import"./chunk-fEI7Cr-O.js";import"./chunk-Ch0SDxT-.js";function a(e){return Array.isArray(e)?e[0]?.spatialReference:e?.spatialReference}function p(e){return e&&(Array.isArray(e)?e.map(p):e.toJSON?e.toJSON():e)}function c(e){return Array.isArray(e)?e.map(t=>w(t)):w(e)}function S(e,t){let r;return Array.isArray(e)?r=e:(r=[],r.push(e),t!=null&&r.push(t)),r}let f;async function d(){return f||(f=h("geometryEngineWorker",{strategy:"distributed"})),f}async function n(e,t){return(await d()).invoke("executeGEOperation",{operation:e,parameters:p(t)})}async function m(e,t){const r=await d();return Promise.all(r.broadcast("executeGEOperation",{operation:e,parameters:p(t)}))}function N(e){return n("extendedSpatialReferenceInfo",[e])}async function b(e,t){return c(await n("clip",[a(e),e,t]))}async function L(e,t){return c(await n("cut",[a(e),e,t]))}function T(e,t){return n("contains",[a(e),e,t])}function V(e,t){return n("crosses",[a(e),e,t])}function v(e,t,r){return n("distance",[a(e),e,t,r])}function E(e,t){return n("equals",[a(e),e,t])}function z(e,t){return n("intersects",[a(e),e,t])}function H(e,t){return n("touches",[a(e),e,t])}function I(e,t){return n("within",[a(e),e,t])}function P(e,t){return n("disjoint",[a(e),e,t])}function j(e,t){return n("overlaps",[a(e),e,t])}function k(e,t,r){return n("relate",[a(e),e,t,r])}function q(e){return n("isSimple",[a(e),e])}async function B(e){return c(await n("simplify",[a(e),e]))}async function C(e,t=!1){return c(await n("convexHull",[a(e),e,t]))}async function G(e,t){return c(await n("difference",[a(e),e,t]))}async function $(e,t){return c(await n("symmetricDifference",[a(e),e,t]))}async function W(e,t){return c(await n("intersect",[a(e),e,t]))}async function F(e,t=null){const r=S(e,t);return c(await n("union",[a(r),r]))}async function K(e,t,r,i,s,u){return c(await n("offset",[a(e),e,t,r,i,s,u]))}async function M(e,t,r,i=!1){const s=[a(e),e,t,r,i];return c(await n("buffer",s))}async function Q(e,t,r,i,s,u){const g=[a(e),e,t,r,i,s,u];return c(await n("geodesicBuffer",g))}async function U(e,t,r=!0){const i=await n("nearestCoordinate",[a(e),e,t,r]);return{...i,coordinate:l.fromJSON(i.coordinate)}}async function X(e,t){const r=await n("nearestVertex",[a(e),e,t]);return{...r,coordinate:l.fromJSON(r.coordinate)}}async function Y(e,t,r,i){return(await n("nearestVertices",[a(e),e,t,r,i])).map(s=>({...s,coordinate:l.fromJSON(s.coordinate)}))}function y(e){return"xmin"in e?e.center:"x"in e?e:e.extent?.center}async function Z(e,t,r){if(e==null)throw new o;const i=e.spatialReference;if((r=r??y(e))==null)throw new o;const s=e.constructor.fromJSON(await n("rotate",[i,e,t,r]));return s.spatialReference=i,s}async function _(e,t){if(e==null)throw new o;const r=e.spatialReference;if((t=t??y(e))==null)throw new o;const i=e.constructor.fromJSON(await n("flipHorizontal",[r,e,t]));return i.spatialReference=r,i}async function ee(e,t){if(e==null)throw new o;const r=e.spatialReference;if((t=t??y(e))==null)throw new o;const i=e.constructor.fromJSON(await n("flipVertical",[r,e,t]));return i.spatialReference=r,i}async function te(e,t,r,i){return c(await n("generalize",[a(e),e,t,r,i]))}async function re(e,t,r){return c(await n("densify",[a(e),e,t,r]))}async function ne(e,t,r,i=0){return c(await n("geodesicDensify",[a(e),e,t,r,i]))}function ae(e,t){return n("planarArea",[a(e),e,t])}function ie(e,t){return n("planarLength",[a(e),e,t])}function ce(e,t,r){return n("geodesicArea",[a(e),e,t,r])}function se(e,t,r){return n("geodesicLength",[a(e),e,t,r])}async function oe(e,t){return c(await n("intersectLinesToPoints",[a(e),e,t]))}async function ue(e,t){await m("changeDefaultSpatialReferenceTolerance",[e,t])}async function fe(e){await m("clearDefaultSpatialReferenceTolerance",[e])}class o extends Error{constructor(){super("Illegal Argument Exception")}}export{M as buffer,ue as changeDefaultSpatialReferenceTolerance,fe as clearDefaultSpatialReferenceTolerance,b as clip,T as contains,C as convexHull,V as crosses,L as cut,re as densify,G as difference,P as disjoint,v as distance,E as equals,N as extendedSpatialReferenceInfo,_ as flipHorizontal,ee as flipVertical,te as generalize,ce as geodesicArea,Q as geodesicBuffer,ne as geodesicDensify,se as geodesicLength,W as intersect,oe as intersectLinesToPoints,z as intersects,q as isSimple,U as nearestCoordinate,X as nearestVertex,Y as nearestVertices,K as offset,j as overlaps,ae as planarArea,ie as planarLength,k as relate,Z as rotate,B as simplify,$ as symmetricDifference,H as touches,F as union,I as within};
